:root {
    --grid-size: 4.5vh;

    /* the original design is for font sizes 16/24/36/48px when the grid size is 40px
       simply divide & multiply */
    --text-size-small: calc(var(--grid-size) * 16 / 40);
    --text-size-medium: calc(var(--grid-size) * 24 / 40);
    --text-size-big: calc(var(--grid-size) * 36 / 40);
    --text-size-massive: calc(var(--grid-size) * 48 / 40);
    --off-white: #DDD;
}

.debug :focus {
  outline: 3px dotted green;
}

.debug * {
  outline: 3px dashed blue;
}

.debug #game-board {
    /* Other styles */
    background-image: linear-gradient(
      to right,
      black 1px,
      transparent 1px
    ),
    linear-gradient(
      to bottom,
      black 1px,
      transparent 1px
    );
    background-size: var(--grid-size) var(--grid-size);
}

#console {
  display: none
}
.foo {
  height: calc( 100% - ((var(--grid-size) * 10 / 40) + var(--text-size-small)) /* footer height */ - (20 * var(--grid-size)) /* #game-board height */ - 15px) /* margin-top */;
}
.debug #console {
  display: block;
  width: 100%;
  /* fill the remaining flex height, minus the height of the footer */
  /*flex: 1 1 calc(100% - 3.8 * var(--grid-size));*/
  position: absolute;
  left: 0;
  top: calc(15px + 20 * var(--grid-size));
  height: 70px;
  /* bottom: 30px; */
  outline: 1px solid black;
  padding: 0.5ex;
  overflow-y: scroll;
  /* background:rgba(0, 0, 0, 61%); */
  font-family: monospace;
  font-size: 0.8em;
  line-height: 70%;
}
.debug #game-container {
  outline: 3px dashed black;
}
#debug.visible {
  display: block;
}
#debug:not(.visible) {
  display: none;
}

body {
    overflow: hidden;
    display: flex;
    justify-content: center;
}

* {
  font-family: sans-serif;
}

#game-container,
#game-board, .board-overlay {
    width: calc(10 * var(--grid-size));
    height: calc(20 * var(--grid-size));
    border-radius: calc(var(--grid-size) * 0.5);
  }
  .board-overlay {
    pointer-events: none;
  }
#game-container {
  position: relative;
  width: calc(10 * var(--grid-size));
}
#game-board,
.board-overlay {
    position: absolute;
    left: 0;
    top: 0;
    background: rgba(0,0,0,0) !important;
}
  #game-board {
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    grid-template-rows: repeat(20, 1fr);
    border: 1px solid black;
    background-color: lightblue;
    overflow: hidden;/* the last piece can stick over the top of the board when the game is over */
}

#controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: calc(3.8 * var(--grid-size));
    padding-left: calc(var(--grid-size) * 20 / 40);
}

.button {
    width: 100%;
    background-color: blue;
    color: var(--off-white);
    border: none;
    border-radius: 5px;
    padding: calc(var(--grid-size) * 10 / 40);
    margin-bottom: calc(var(--grid-size) * 4 / 40);
}
.button,
.pause.button .label::after {
    font-size: calc(var(--text-size-medium));
}
.start.button {
    background-color: green;
    color: lightbeige;
}
  
 .button:hover {
    background-color: lightblue;
    color: black;
    cursor: pointer;
  }
  
  /* When .paused is set on <body>, the pause button reads "Resume" */
  .pause.button .label {
    font-size: 0;
  }
  .pause.button .label::after {
    content: "Pause";
  }
  .paused .pause.button .label::after {
    content: "Resume";
  }


  #score {
    position: absolute;
    top: 0;
    left: 0;
  }
  #score .label {
    display: none;
  }
  #score .value::before {
    content: "Score: ";
  }
  #score .value {
    position: absolute;
    top: 0;
    left: 0;
    padding: calc(var(--grid-size) * 10 / 40);
  }

  
  @media (max-width: 600px) {
    :root {
      --grid-size: 7vw;
    }
  }

  .board-overlay {
    position: absolute;
    left: 0;
    top: 0;
    z-index: 1; /* This is the key to making the overlay appear on top of the game board */
    text-shadow: 0 0 1ex lightblue;
  }
  #score {
    position: absolute;
    top: 0;
    left: 0;
    font-size: var(--text-size-medium);
    background: none;
  }
  #game-over {
    z-index: 2;
    background-color: rgba(0, 0, 0, 61%) !important;
    display: none;
    pointer-events: auto; /* obscure the board */
  }
  .game-over #game-over {
    display: block;
  }
  .debug .game-over #game-over {
    outline: 5px dashed darkblue;
  }
  .board-overlay .label {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -95%); /* align slightly above the center */
    font-size: var(--text-size-big);
  }

  .block {
    width: var(--grid-size);
    height: var(--grid-size);
    /* low-contrast border and box-sizing: border-box help hide that the borders are wonky because we don't have integer grid sizes */
    /* border: 1px solid black; */
    border: 1px solid beige;
    box-sizing: border-box;
    position: absolute;
    left: 0;
    top: 0;
  }
  
  .I {
    background-color: cyan;
  }
  
  .O {
    background-color: yellow;
  }
  
  .T {
    background-color: purple;
  }
  
  .S {
    background-color: lime;
  }
  
  .Z {
    background-color: red;
  }
  
  .J {
    background-color: blue;
  }
  
  .L {
    background-color: orange;
  }

footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  text-align: center;
  background-color: rgba(0,0,0,0.8);
  padding: calc(var(--grid-size) * 10 / 40);
  color: var(--off-white);
  font-size: var(--text-size-small);
}

footer a {
  text-decoration: none;
}

footer a:hover {
  text-decoration: underline;
  color: white;
}
footer a:link{color:inherit}
footer a:active{color:inherit}
footer a:visited{color:inherit}
